version: '3.7'

services:
  
  client:
    image: client:${TAG}
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: client
    restart: always
    ports: ['${CLIENT_PORT}:3000']
    volumes:
      - ./client/node_modules:/app/node_modules
      - ./client/src:/app/src
      - ./client/public:/app/public
    depends_on:
      - server
    networks: ['transcendence']

  server:
    image: server:${TAG}
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: server
    environment:
      - DATABASE_URL=${DATABASE_URL}
    restart: always
    ports: ['${SERVER_PORT}:4200']
    volumes:
      - ./server/node_modules:/app/node_modules
      - ./server/src:/app/src
    depends_on:
      database:
        condition: service_healthy
    networks: ['transcendence']
  
  database:
    image: postgres:alpine
    container_name: database
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA}
    restart: always
    ports: ['${POSTGRES_PORT}:5432']
    networks: ['transcendence']
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB}" ]

networks:
  transcendence:
    driver: bridge
    name: transcendance
