version: '3.7'

services:
  
  client:
    image: client:${TAG}
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: client
    restart: always
    ports: ['${CLIENT_PORT}:3000']
    volumes:
      - ./client/:/app
    networks: ['transcendence']
    env_file: ['.env.dev']
    healthcheck:
      test: netstat -an | grep 3000 > /dev/null;if [ 0 != $$? ];then exit 1;fi;
      interval: 30s
      timeout: 30s
      retries: 4
      start_period: 1m30s

  server:
    image: server:${TAG}
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: server
    restart: always
    ports: ['${SERVER_PORT}:4200']
    volumes:
      - ./server/:/app
    depends_on:
      database:
        condition: service_healthy
    networks: ['transcendence']
    env_file: ['.env.dev']
    entrypoint: ['/app/script/docker-entrypoint.${RUNNING_ENV}.sh']
    healthcheck:
      test: netstat -an | grep 4200 > /dev/null;if [ 0 != $$? ] && [ ! -f "/tmp/.ready" ];then exit 1;fi;
      interval: 30s
      timeout: 30s
      retries: 4
      start_period: 1m30s
    
  database:
    image: postgres:alpine
    container_name: database
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA}
    restart: always
    ports: ['${POSTGRES_PORT}:5432']
    networks: ['transcendence']
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
    env_file: ['.env.dev']

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports: ['${DBADMIN_PORT}:8080']
    networks: ['transcendence']
    depends_on:
      database:
        condition: service_healthy

  controller:
    image: busybox
    container_name: controller
    restart: "no"
    networks: ['transcendence']
    depends_on:
      database:
        condition: service_healthy
      client:
        condition: service_healthy
      server:
        condition: service_healthy
  
  redis:
    image: redis
    container_name: redis
    restart: always
    networks: ['transcendence']

networks:
  transcendence:
    driver: bridge
    name: transcendance
