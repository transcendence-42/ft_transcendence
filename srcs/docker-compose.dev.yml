version: '3.9'

services:
  client:
    image: client:${TAG}
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: client
    restart: always
    ports: ['${CLIENT_PORT}:3000']
    volumes:
      - ./client/:/app
    networks: ['transcendence']
    env_file: ['.env.dev']
    entrypoint: ['/app/script/docker-entrypoint.${RUNNING_ENV}.sh']
    healthcheck:
      test: netstat -an | grep 3000 > /dev/null;if [ 0 != $$? ] && [ ! -f "/tmp/.ready" ];then exit 1;fi;
      interval: 30s
      timeout: 30s
      retries: 15
      start_period: 30s

  server:
    image: server:${TAG}
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: server
    restart: always
    ports: ['${SERVER_PORT}:4200', '${GAME_WS_PORT}:${GAME_WS_PORT}', '${CHAT_WS_PORT}:${CHAT_WS_PORT}']
    volumes:
      - ./server/:/app
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: ['transcendence']
    env_file: ['.env.dev']
    entrypoint: ['/app/script/docker-entrypoint.${RUNNING_ENV}.sh']
    healthcheck:
      test: netstat -an | grep 4200 > /dev/null;if [ 0 != $$? ] && [ ! -f "/tmp/.ready" ];then exit 1;fi;
      interval: 30s
      timeout: 30s
      retries: 15
      start_period: 30s

  database:
    image: database:${TAG}
    build:
      context: ./database
      dockerfile: Dockerfile.dev
      args: 
        - POSTGRES_USER=${POSTGRES_USER}
    container_name: database
    entrypoint: './docker-entrypoint.${RUNNING_ENV}.sh'
    env_file: ['.env.dev']
    restart: always
    ports: ['${POSTGRES_PORT}:5432']
    networks: ['transcendence']
    healthcheck:
      test: if [ ! -f "/tmp/.ready" ];then exit 1; fi;
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 20s

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports: ['${DBADMIN_PORT}:8080']
    networks: ['transcendence']
    depends_on:
      database:
        condition: service_healthy

  controller:
    image: busybox
    container_name: controller
    restart: 'no'
    networks: ['transcendence']
    depends_on:
      database:
        condition: service_healthy
      client:
        condition: service_healthy
      server:
        condition: service_healthy

  redis:
    image: redislabs/rejson:latest
    container_name: redis
    restart: always
    ports: ['${REDIS_PORT}:6379']
    networks: ['transcendence']
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 1m30s
      timeout: 30s
      retries: 8
      start_period: 10s

  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    restart: always
    networks: ['transcendence']
    ports: ['8001:8001']

networks:
  transcendence:
    driver: bridge
    name: transcendance
