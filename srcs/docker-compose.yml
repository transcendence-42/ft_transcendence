version: '3.9'

services:
  
  client:
    image: client:${TAG}
    build:
      context: ./client
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}  
        - REACT_APP_GAME_SOCKET_URL=${REACT_APP_GAME_SOCKET_URL}
        - REACT_APP_CHAT_SOCKET_URL=${REACT_APP_CHAT_SOCKET_URL}
    container_name: client
    restart: always
    ports: ['${CLIENT_PORT}:443']
    depends_on:
      server:
        condition: service_healthy
    networks: ['transcendence']
    env_file: ['.env']
    healthcheck:
      test: netstat -an | grep 443 > /dev/null;if [ 0 != $$? ] && [ ! -f "/tmp/.ready" ];then exit 1;fi;
      interval: 30s
      timeout: 30s
      retries: 15
      start_period: 30s

  server:
    image: server:${TAG}
    build: 
      context: ./server
      args:
        - RUNNING_ENV=${RUNNING_ENV}
        - SERVER_PORT=${SERVER_PORT}
        - CLIENT_PORT=${CLIENT_PORT}
        - DBADMIN_PORT=${DBADMIN_PORT}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - PGDATA=${PGDATA}
        - POSTGRES_PORT=${POSTGRES_PORT}
        - API_PORT=${API_PORT}
        - REACT_APP_API_URL=${REACT_APP_API_URL}
        - GAME_WS_PORT=${GAME_WS_PORT}
        - REACT_APP_GAME_SOCKET_URL=${REACT_APP_GAME_SOCKET_URL}
        - CHAT_WS_PORT=${CHAT_WS_PORT}
        - REACT_APP_CHAT_SOCKET_URL=${REACT_APP_CHAT_SOCKET_URL}
        - CLIENT_ID=${CLIENT_ID}
        - CLIENT_SECRET=${CLIENT_SECRET}
        - CALLBACK_URL=${CALLBACK_URL}
        - SESSION_SECRET=${SESSION_SECRET}
        - REDIS_URL=${REDIS_URL}
        - REDIS_PORT=${REDIS_PORT}
        - REDIS_INSIGHT_PORT=${REDIS_INSIGHT_PORT}
        - DATABASE_URL=${DATABASE_URL}
        - WEBSITE_URL=${WEBSITE_URL}
        - HOME_PAGE=${HOME_PAGE}
        - LOGIN_PAGE=${LOGIN_PAGE}
        - TWO_FA_APP_NAME=${TWO_FA_APP_NAME}
    container_name: server
    restart: always
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: ['transcendence']
    env_file: ['.env']
    entrypoint: ['/app/script/docker-entrypoint.${RUNNING_ENV}.sh']
    healthcheck:
      test: netstat -an | grep 4200 > /dev/null;if [ 0 != $$? ];then exit 1;fi;
      interval: 30s
      timeout: 30s
      retries: 15
      start_period: 30s
   
  database:
    image: database:${TAG}
    build:
      context: ./database
      args: 
        - POSTGRES_USER=${POSTGRES_USER}
    container_name: database
    env_file: ['.env']
    restart: always
    ports: ['${POSTGRES_PORT}:5432']
    networks: ['transcendence']
    volumes: ['db_data:${PGDATA}']
    healthcheck:
      test: if [ ! -f "/tmp/.ready" ];then exit 1; fi;
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 20s

  controller:
    image: busybox
    container_name: controller
    restart: "no"
    networks: ['transcendence']
    depends_on:
      database:
        condition: service_healthy
      client:
        condition: service_healthy
      server:
        condition: service_healthy

  redis:
    image: redislabs/rejson:latest
    container_name: redis
    restart: always
    ports: ['${REDIS_PORT}:6379']
    networks: ['transcendence']
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1m30s
      timeout: 30s
      retries: 8
      start_period: 10s

networks:
  transcendence:
    driver: bridge
    name: transcendance

volumes:
  db_data:
