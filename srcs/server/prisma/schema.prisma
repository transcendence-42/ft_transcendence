// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChannelType {
  PUBLIC
  PRIVATE
  PROTECTED
  DIRECT
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

model User {
  id                  Int               @id @default(autoincrement())
  username            String            @unique
  email               String            @unique
  createdAt           DateTime          @default(now())
  profilePicture      String?
  currentStatus       Int               @default(1)
  eloRating           Int               @default(1000)
  credentials         Credentials?
  stats               Stats?
  ratingHistory       Rating[]
  ownedChannels       Channel[]
  channels            UserOnChannel[]
  friendshipRequested Friendship[]      @relation("requester")
  friendshipAddressed Friendship[]      @relation("addressee")
  matches             PlayerOnMatch[]
  achievements        UserAchievement[]
}

model Match {
  id      Int             @id @default(autoincrement())
  date    DateTime        @default(now())
  players PlayerOnMatch[]
}

model Achievement {
  id         Int               @id @default(autoincrement())
  name       DateTime          @default(now())
  usersStats UserAchievement[]
}

model Channel {
  id       Int             @id @default(autoincrement())
  name     String
  type     ChannelType
  password String?
  owner    User            @relation(fields: [ownerId], references: [id])
  ownerId  Int
  users    UserOnChannel[]
}

model UserOnChannel {
  channelId  Int
  userId     Int
  role       UserRole
  hasLeftChannel Boolean @default(false)
  isMuted     Boolean @default(false)
  isBanned    Boolean @default(false)
  joinedAt   DateTime @default(now()) @db.Timestamp()
  channel    Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([channelId, userId])
}

model Credentials {
  id                 Int     @id @default(autoincrement())
  email              String  @unique
  username           String  @unique
  password           String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int     @unique
  twoFactorActivated Boolean @default(false)
  twoFactorSecret    String?
}

model Stats {
  id     Int  @id @default(autoincrement())
  wins   Int  @default(0)
  losses Int  @default(0)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

model Rating {
  id     Int      @id @default(autoincrement())
  date   DateTime @default(now())
  rating Int
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model PlayerOnMatch {
  match          Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId        Int
  player         User  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId       Int
  side           Int   @default(0)
  score          Int   @default(0)
  status         Int?

  @@id([matchId, playerId])
}

model UserAchievement {
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  date          DateTime    @default(now())

  @@id([achievementId, userId])
}

model Friendship {
  requester   User     @relation(name: "requester", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId Int
  addressee   User     @relation(name: "addressee", fields: [addresseeId], references: [id], onDelete: Cascade)
  addresseeId Int
  date        DateTime @default(now())
  status      Int      @default(0)

  @@id([requesterId, addresseeId])
}
