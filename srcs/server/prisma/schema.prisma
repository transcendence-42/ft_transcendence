// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int               @id @default(autoincrement())
  username            String            @unique
  email               String            @unique
  createdAt           DateTime          @default(now())
  profilePicture      String?
  currentStatus       Int               @default(0)
  currentLadder       Int               @default(0)
  eloRating           Int               @default(1000)
  credentials         Credentials?
  stats               Stats?
  rankingHistory      Rank[]
  ownedChannels       Channel[]
  channels            UserOnChannel[]
  friendshipRequested Friendship[]      @relation("requester")
  friendshipAddressed Friendship[]      @relation("addressee")
  matches             PlayerOnMatch[]
  achievements        UserAchievement[]
}

model Match {
  id      Int             @id @default(autoincrement())
  date    DateTime        @default(now())
  status  Int             @default(1)
  players PlayerOnMatch[]
}

model Achievement {
  id         Int               @id @default(autoincrement())
  name       DateTime          @default(now())
  usersStats UserAchievement[]
}

model Channel {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  channelMode Int             @default(0)
  password    String?
  owner       User            @relation(fields: [ownerId], references: [id])
  ownerId     Int             @unique
  users       UserOnChannel[]
}

model Credentials {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String @unique
  password String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int    @unique
}

model Stats {
  id                 Int     @id @default(autoincrement())
  wins               Int     @default(0)
  losses             Int     @default(0)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int     @unique
  twoFactorActivated Boolean @default(false)
  twoFactorSecret    String?
}

model Rank {
  id       Int      @id @default(autoincrement())
  date     DateTime @default(now())
  position Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int      @unique
}

model UserOnChannel {
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  mode      Int     @default(0)

  @@id([channelId, userId])
}

model PlayerOnMatch {
  match          Match @relation(fields: [matchId], references: [id])
  matchId        Int
  player         User  @relation(fields: [playerId], references: [id])
  playerId       Int
  playerNum      Int   @default(1)
  playerScore    Int   @default(0)
  winProbability Float

  @@id([matchId, playerId])
}

model UserAchievement {
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId Int
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  date          DateTime    @default(now())

  @@id([achievementId, userId])
}

model Friendship {
  requester   User     @relation(name: "requester", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId Int
  addressee   User     @relation(name: "addressee", fields: [addresseeId], references: [id], onDelete: Cascade)
  addresseeId Int
  date        DateTime @default(now())
  status      Int      @default(0)

  @@id([requesterId, addresseeId])
}
